/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Dec 07 2021 23:13:50 GMT+0000 (Coordinated Universal Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function PetriVizControl(options) {

        this._logger = options.logger.fork('Control');
        this._client = options.client;
        // Initialize core collections and variables
        this._widget = options.widget;
        this._currentNodeId = null;
        // this._currentNodeParentId = undefined;
        this._networkRootLoaded = false;
        this._fireableEvents = null;
        this._initWidgetEventHandlers();
        this.setFireableTrans = this.setFireableTrans.bind(this);
        this._logger.debug('ctor finished');
    }

    PetriVizControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    PetriVizControl.prototype.selectedObjectChanged = function (nodeId) {
        var self = this;
        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
            self._networkRootLoaded = false;
        }

        self._currentNodeId = nodeId;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};

            self._selfPatterns[nodeId] = {children: 1};  // Territory "rule"

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    PetriVizControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId)
            };
        }
        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    PetriVizControl.prototype._eventCallback = function (events) {
        const self = this;
        console.log(events);
        events.forEach(event => {
            if (event.eid && 
                event.eid === self._currentNodeId ) {
                    if (event.etype == 'load' || event.etype == 'update') {
                        self._networkRootLoaded = true;
                    } else {
                        self.clearPetri();
                        return;
                    }
                }
        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait for additional load cycles
            self._initPetri();
        }
    };

    PetriVizControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Machine manipulation functions * * * * * * * */
    PetriVizControl.prototype._initPetri = function () {
        const self = this;
        //just for the ease of use, lets create a META dictionary
        const rawMETA = self._client.getAllMetaNodes();
        const META = {};
        rawMETA.forEach(node => {
            META[node.getAttribute('name')] = node.getId(); //we just need the id...
        });

        //we need to collect places to transtions and transtions to places
        const smNode = self._client.getNode(self._currentNodeId);
        const elementIds = smNode.getChildrenIds();
        const petri = { places:{}, transitions:{}, fireableTrans:{}};
        const fireables = {};

        elementIds.forEach(elementId => {
            const node = self._client.getNode(elementId);

            //get places data struc
            if (node.isTypeOf(META['place'])){
                const place = { transitions:{}, name: node.getAttribute('name'), position: node.getRegistry('position'), tokens: node.getAttribute('tokens')};
                elementIds.forEach(nextId => {
                    const nextNode = self._client.getNode(nextId);
                    if(nextNode.isTypeOf(META['arc']) && nextNode.getPointerId('src') === elementId) {
                        place.transitions[nextNode.getPointerId('dst')] = nextNode.getPointerId('dst');
                    }
                });
            petri.places[elementId] = place;
            }

            //get transtions data struc
            if (node.isTypeOf(META['transition'])){
                const transition = {places:{}, name: node.getAttribute('name'), position: node.getRegistry('position'), fireable: true};
                elementIds.forEach(nextId => {
                    const nextNode = self._client.getNode(nextId);
                    if(nextNode.isTypeOf(META['arc']) && nextNode.getPointerId('src') === elementId) {
                        transition.places[nextNode.getPointerId('dst')] = nextNode.getPointerId('dst');
                    }
                });
            petri.transitions[elementId] = transition;
            }
        });
        
        //determine fireability of transitions
        Object.keys(petri.places).forEach( placeId => {
            Object.keys(petri.places[placeId].transitions).forEach( transId => {
                fireables[transId] = transId;
            });
        });
        Object.keys(petri.transitions).forEach( transId => {
            if (!(transId in fireables)){
                petri.transitions[transId].fireable = false;
            }
        });
        Object.keys(petri.places).forEach( placeId => {
            if (petri.places[placeId].tokens == 0){
                Object.values(petri.places[placeId].transitions).forEach( transId => {
                    petri.transitions[transId].fireable = false;
                });
            }
        });
        Object.keys(petri.transitions).forEach( transId => {
            if (petri.transitions[transId].fireable == true){
                petri.fireableTrans[transId] = transId;
            }
        });
        petri.setFireableTrans = this.setFireableTrans;
        this._displayToolbarItems();
        self._widget.initPetri(petri);
        
    };

    PetriVizControl.prototype.clearPetri = function () {
        const self = this;
        self._networkRootLoaded = false;
        self._widget.destroyMachine();
    };

    PetriVizControl.prototype.setFireableTrans = function (events) {
        this._fireableEvents = events;

        console.log(events);
        if (events && Object.keys(events).length > 1) {
            // we need to fill the dropdow button with options
            this.$btnEventSelector.clear();
            Object.keys(events).forEach(event => {
                this.$btnEventSelector.addButton({
                    text: event,
                    title: 'fire event: '+ event,
                    data: {event: event},
                    clickFn: data => {
                        this._widget.fireEvent(data.event);
                    }
                });
            });
        } else if (events && Object.keys(events).length === 0) {
            this._fireableEvents = null;
        }
        this._displayToolbarItems();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriVizControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    PetriVizControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    PetriVizControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    PetriVizControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    PetriVizControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    PetriVizControl.prototype._displayToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    PetriVizControl.prototype._hideToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    PetriVizControl.prototype._removeToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    PetriVizControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;
        this._toolbarItems = [];
        this._toolbarItems.push(toolBar.addSeparator());

        //Reset button
        this.$btnResetPetri = toolBar.addButton({
            title: 'Reset simulator',
            text: 'Reset ',
            icon: 'glyphicon glyphicon-repeat',
            clickFn: function (/*data*/) {
                self._initPetri();
            }
        });
        this._toolbarItems.push(this.$btnResetPetri);

        //Classification
        console.log(this._modelNodeId);
        this.$btnClassification = toolBar.addButton({
            title: 'Classifies PetriNet',
            icon: 'glyphicon glyphicon-filter',
            text: 'Classify ',
            clickFn: function (/*data*/) {
                const context = self._client.getCurrentPluginContext('PythonPlug',self._currentNodeId, []);
                console.log(context);
                console.log(self._currentNodeId);
                // !!! it is important to fill out or pass an empty object as the plugin config otherwise we might get errors...
                context.pluginConfig = {};
                self._client.runServerPlugin(
                    'PythonPlug', 
                    context, 
                    function(err, result){
                        // here comes any additional processing of results or potential errors.
                        console.log('plugin err:', err);
                        console.log('plugin result:', result);
                });
            }
        });
        this._toolbarItems.push(this.$btnClassification);

        //Fire-all button
        this.$btnResetPetri = toolBar.addButton({
            title: 'Fire-all transitions',
            text: 'Fire-all ',
            icon: 'glyphicon glyphicon-fire',
            clickFn: function (/*data*/) {
                self._widget._setAllStates();
            }
        });
        this._toolbarItems.push(this.$btnResetPetri);
        this._toolbarInitialized = true;
    };

    return PetriVizControl;
});
